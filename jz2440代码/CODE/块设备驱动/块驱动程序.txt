框架：

app:          open,read,write,"1.text"
-----------------------------------------------文件的读写

文件系统：vfat , ext2 , ext3 , yaffs2 , jffs2      (把文件的读写转化为扇区的读写)

-----------------ll rw block -------------------扇区的读写(有个通用的入口 ll rw block(底层的读写块))
		1、把“读写”放入队列
		2、调用队列的处理函数（优化/调顺序/合并）
                   块设备驱动程序
-----------------------------------------------
硬件：           硬盘，flash


《Linux内核源代码情景分析》

分析ll rw block
			for (i = 0; i < nr; i++) {
				struct buffer_head *bh = bhs[i];
				submit_bh(WRITE, bh);
					 struct bio *bio;//使用bh(buffer head)来构造bio(block input/output)
					 submit_bio(rw, bio);//提交bio
							//通用的构造请求：使用bio来构造请求（request）
							generic_make_request(bio);
								__generic_make_request(bio);
										request_queue_t *q = bdev_get_queue(bio->bi_bdev);// 找到队列      / request_queue_t请求队列
										//调用队列的“构造请求函数”
										ret = q->make_request_fn(q, bio);
												//默认函数是__make_request
												__make_request
														//先尝试合并
														elv_merge(q, &req, bio);//(elv电梯的缩写，merge合并)电梯调度算法合并请求
														
														//如果合并不成，使用bio构造请求
														init_request_from_bio(req, bio);
														//把请求放入队列
														add_request(q, req);
														//执行队列
														__generic_unplug_device(q);
																//调用队列的“处理函数”
																q->request_fn(q);

													
怎么写块设备驱动程序呢？
1、分配gendisk结构体：alloc_disk
2、设置
2.1、分配 /设置队列：request_queue_t   //它提供读写能力，这个队列只是提供读写的能力	
			blk_init_queue           (分配队列，blk是block)
2.2、设置gendisk其他信息			          //它提供属性：比如容量
3、注册：add_disk
	




	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	